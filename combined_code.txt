## File: app.R 
 #app.R

# Source other elements
source("panels.R")
source("module_line_chart.R")
source("module_area_chart.R")
source("module_data_table.R")
source("options.R")
source("module_data_functions.R")
source("module_chart_functions.R")
source("module_summary.R")

# Source the UI and server components
source("ui.R")
source("server.R")

# Run the app
shinyApp(ui = ui, server = server)

## File: data.R 
 ## data.R

library(readxl)
library(openxlsx)
library(dplyr)
library(tidyr)



# Load  data from the Excel file
file_path <- "ghg_data.xlsx"
agri_gas <- read_excel(file_path, sheet = "agri_gas")
national_total <- read_excel(file_path, sheet = "national_total")
subsector_total <- read_excel(file_path, sheet = "subsector_total")
subsector_source <- read_excel(file_path, sheet = "subsector_source")

agri_gas <- agri_gas %>% 
  rename(Gas = ...1)

# Reshape the data to long format
agri_gas <- agri_gas %>% pivot_longer(cols = -Gas, names_to = "Year", values_to = "Value")
national_total <- national_total %>% pivot_longer(cols = -Industry, names_to = "Year", values_to = "Value")
subsector_total <- subsector_total %>% pivot_longer(cols = -Subsector, names_to = "Year", values_to = "Value")

# Convert Year to numeric
agri_gas$Year <- as.numeric(agri_gas$Year)
national_total$Year <- as.numeric(national_total$Year)
subsector_total$Year <- as.numeric(subsector_total$Year)


save(subsector_total, agri_gas, national_total, subsector_source, file = "ghg_data.RData")

# load data
load("ghg_data.RData")

## File: hc_theme.R 
 # hc_theme.R

library(highcharter)

# Define the Highcharts theme
thm <- hc_theme(
  chart = list(
    style = list(
      fontFamily = "Arial, sans-serif",
      fontSize = "16px",
      color = "black"
    )
  ),
  title = list(
    style = list(
      fontFamily = "Arial, sans-serif",
      fontSize = "16px",
      color = "black"
    )
  ),
  subtitle = list(
    style = list(
      fontFamily = "Arial, sans-serif",
      fontSize = "16px",
      color = "black"
    )
  ),
  xAxis = list(
    labels = list(
      style = list(
        fontFamily = "Arial, sans-serif",
        fontSize = "16px",
        color = "black"
      )
    ),
    title = list(
      style = list(
        fontFamily = "Arial, sans-serif",
        fontSize = "16px",
        color = "black"
      )
    )
  ),
  yAxis = list(
    labels = list(
      style = list(
        fontFamily = "Arial, sans-serif",
        fontSize = "16px",
        color = "black"
      )
    ),
    title = list(
      style = list(
        fontFamily = "Arial, sans-serif",
        fontSize = "16px",
        color = "black"
      )
    )
  ),
  tooltip = list(
    style = list(
      fontFamily = "Arial, sans-serif",
      fontSize = "16px",
      color = "black"
    ),
    headerFormat = "<b>{point.key}</b><br/>",  
    pointFormat = "{series.name}: {point.y:.2f} MtCO₂e"
  ),
  legend = list(
    itemStyle = list(
      fontFamily = "Arial, sans-serif",
      fontSize = "16px",
      color = "black"
    )
  ),
  plotOptions = list(
    series = list(
      stickyTracking = FALSE,
      itemStyle = list(
        fontFamily = "Arial, sans-serif",
        fontSize = "16px",
        color = "black"
      ),
      dataLabels = list(
        style = list(
          fontFamily = "Arial, sans-serif",
          fontSize = "16px",  # Increase the font size for data labels
          color = "black"
        )
      ),
      marker = list(
        enabled = TRUE,
        states = list(
          hover = list(
            enabled = TRUE
          )
        )
      )
    )
  ),
  colors = c("#002d54", "#2b9c93", "#6a2063", "#e5682a", "#0b4c0b", "#5d9f3c", "#592c20", "#ca72a2")
)

# Apply the Highcharts theme globally
options(highcharter.theme = thm)

## File: module_area_chart.R 
 # module_area_chart.R

# UI function for the area chart module
areaChartUI <- function(id) {
  ns <- NS(id)
  tagList(
    htmlOutput(ns("title")),
    highchartOutput(ns("area_chart")),
    htmlOutput(ns("footer")),  # Add footer output
    div(
      class = "note",
      style = "margin-top: 20px; padding: 10px; border-top: 1px solid #ddd;",
      HTML(
        "<strong>Note:</strong><ul>
          <li>To remove a series from the chart, deselect the variable from the sidebar menu.</li>
          <li>Select a year range by adjusting the slider on the sidebar or by zooming into the graph by clicking and dragging over an area you wish to see.</li>
          <li>You can see data values for a specific year by hovering your mouse over the area.</li>
        </ul>"
      )
    )
  )
}

# Server function for the area chart module
areaChartServer <- function(id, data, group_column, title, yAxisTitle, footer) {
  moduleServer(id, function(input, output, session) {
    ns <- session$ns
    reactive_colors <- reactive({ assign_colors(data(), preset_colors) })
    
    output$title <- renderUI({
      year_min <- min(data()$Year, na.rm = TRUE)
      year_max <- max(data()$Year, na.rm = TRUE)
      HTML(paste0("<div style='font-size: 20px; font-weight: bold;'>Agricultural Emissions by Subsector in Scotland, ", year_min, " to ", year_max, "</div>"))
    })
    
    output$footer <- renderUI({
      HTML(footer())
    })
    
    output$area_chart <- renderHighchart({
      chart_data <- data()
      colors <- reactive_colors()
      hc <- highchart() %>%
        hc_chart(type = "area", zoomType = "xy") %>%
        hc_yAxis(title = list(text = yAxisTitle())) %>%
        hc_xAxis(type = "category", tickInterval = 5) %>%
        hc_plotOptions(area = list(stacking = "normal")) %>%
        hc_legend(align = "left", alignColumns = FALSE, layout = "horizontal") %>%
        hc_plotOptions(area = list(
          stickyTracking = TRUE)) %>%
        hc_add_theme(thm)
      
      unique_groups <- unique(chart_data[[group_column()]])
      lapply(unique_groups, function(g) {
        hc <<- hc %>%
          hc_add_series(name = g, data = chart_data[chart_data[[group_column()]] == g, ] %>% select(x = Year, y = Value), color = colors[[g]])
      })
      
      hc
    })
  })
}

## File: module_bar_chart.R 
 #module_bar_chart.R

# UI function for the bar chart module
barChartUI <- function(id) {
  ns <- NS(id)
  tagList(
    tags$style(HTML("
      .chart-container {
        position: relative;
      }
      .chart-controls {
        display: flex;
        align-items: center;
      }
      .chart-controls .form-group {
        margin-bottom: 0;
        margin-left: 10px;
      }
      .chart-controls .btn {
        margin-left: 10px;
      }
      .year-label {
        margin-right: 10px;
        font-weight: bold;
      }
    ")),
    div(class = "chart-container",
        fluidRow(
          column(8, htmlOutput(ns("title"))),  # Title column
          column(4, div(class = "chart-controls",
                        div(class = "year-label", "Year:"),
                        sliderInput(ns("year"), NULL, min = 1998, max = 2022, value = 1998, step = 1, sep = "", ticks=TRUE, animate = animationOptions(interval = 1000, loop = FALSE), width = '200px'),
                        actionButton(ns("playPause"), "", icon = icon("play"), class = "btn btn-primary")
          ))
        ),
        highchartOutput(ns("chart"), height = "500px")
    ),
    htmlOutput(ns("footer")),  # Add footer output
    div(
      class = "note",
      style = "margin-top: 20px; padding: 10px; border-top: 1px solid #ddd;",
      HTML(
        "<strong>Note:</strong><ul>
          <li>Press the play button at the top right of the screen to see the timelapse of the data. You can manually adjust the year by adjusting the slider.</li>
          <li>To remove a series from the chart, deselect the variable from the sidebar menu.</li>
          <li>You can see data values for a specific year by hovering your mouse over the line.</li>
        </ul>"
      )
    )
  )
}

# Server function for the bar chart module
barChartServer <- function(id, chart_data, column_name, title, yAxisTitle, footer) {
  moduleServer(id, function(input, output, session) {
    ns <- session$ns
    
    max_value <- reactive({
      all_data <- chart_data()
      if (is.null(all_data) || nrow(all_data) == 0) return(0)
      max_val <- max(all_data$Value, na.rm = TRUE)
      return(max_val)
    })
    
    getData <- function(year, nbr) {
      data <- chart_data()
      if (is.null(data) || nrow(data) == 0) return(data.frame())
      data %>%
        filter(Year == year) %>%
        arrange(desc(Value)) %>%
        slice(1:nbr) %>%
        mutate(Value = as.numeric(Value))
    }
    
    getSubtitle <- function(year, data) {
      if (nrow(data) == 0) return("")
      total_value <- sum(data$Value, na.rm = TRUE)
      paste0("<span style='font-size: 80px'>", year, "</span><br><span style='font-size: 22px'>Total: <b>", round(total_value, 2), "</b> MtCO₂e</span>")
    }
    
    getDataList <- function(data, colors) {
      if (nrow(data) == 0) return(list())
      first_col_name <- names(data)[1]
      lapply(1:nrow(data), function(i) {
        list(
          name = data[[first_col_name]][i],
          y = data$Value[i],
          color = colors[[data[[first_col_name]][i]]]
        )
      })
    }
    
    current_year <- reactiveVal(1998)
    nbr <- 20
    
    current_data <- reactive({
      getData(current_year(), nbr)
    })
    
    current_subtitle <- reactive({
      getSubtitle(current_year(), current_data())
    })
    
    current_colors <- reactive({
      assign_colors(chart_data(), preset_colors)
    })
    
    current_data_list <- reactive({
      getDataList(current_data(), current_colors())
    })
    
    updateYear <- function() {
      year <- current_year()
      if (year < 2022) {
        current_year(year + 1)
      } else {
        current_year(1998)
        session$sendCustomMessage(type = 'resetPlayButton', message = NULL)
      }
    }
    
    observe({
      if (input$playPause %% 2 == 1) {
        isolate({
          updateYear()
        })
        invalidateLater(1000, session)
      }
    })
    
    observe({
      updateSliderInput(session, "year", value = current_year())
    })
    
    output$title <- renderUI({
      HTML(paste0("<div style='font-size: 20px; font-weight: bold;'>", title(), "</div>"))
    })
    
    output$footer <- renderUI({
      HTML(footer())
    })
    
    output$chart <- renderHighchart({
      data <- current_data()
      if (nrow(data) == 0) return(NULL)
      first_col_name <- names(data)[1]
      highchart() %>%
        hc_chart(type = "bar", zoomType ="xy", animation = list(duration = 1000)) %>%
        hc_xAxis(type = "category", categories = data[[first_col_name]]) %>%
        hc_yAxis(opposite = TRUE, tickPixelInterval = 150, title = list(text = yAxisTitle()), max = max_value() + 1) %>%
        hc_plotOptions(series = list(
          animation = FALSE,
          groupPadding = 0,
          pointPadding = 0.1,
          borderWidth = 0,
          colorByPoint = FALSE,
          dataSorting = list(enabled = TRUE, matchByName = TRUE),
          dataLabels = list(enabled = TRUE, format = '{point.y:.2f}')
        )) %>%
        hc_series(list(
          name = as.character(current_year()),
          data = current_data_list()
        )) %>%
        hc_legend(enabled = FALSE) %>%
        hc_responsive(rules = list(
          list(
            condition = list(maxWidth = 550),
            chartOptions = list(
              xAxis = list(visible = FALSE),
              plotOptions = list(
                series = list(
                  dataLabels = list(
                    list(enabled = TRUE, y = 8),
                    list(enabled = TRUE, format = '{point.name}', y = -8, style = list(fontWeight = 'normal', opacity = 0.7))
                  )
                )
              )
            )
          )
        ))
    })
    
    observeEvent(input$year, {
      current_year(input$year)
    })
  })
}

## File: module_chart_functions.R 
 #module_chart_functions.R

# Function to render line charts
render_line_chart <- function(chart_id, chart_data, chart_type, input, output) {
  column_name <- reactive({ names(chart_data())[1] })
  
  title <- reactive({
    switch(chart_type,
           "Total Emissions" = "National Greenhouse Gas Emissions by Source in Scotland",
           "Subsector Emissions" = "Agricultural Greenhouse Gas Emissions by Subsector in Scotland",
           "Gas Emissions" = "Agricultural Greenhouse Gas Emissions Breakdown in Scotland"
    )
  })
  
  yAxisTitle <- reactive({
    switch(chart_type,
           "Total Emissions" = "Emissions (MtCO₂e)",
           "Subsector Emissions" = "Emissions (MtCO₂e)",
           "Gas Emissions" = "Emissions (MtCO₂e)")
  })
  
  footer_text <- reactive({
    switch(chart_type,
           "Total Emissions" = '<div style="font-size: 16px;"><a href="https://www.gov.scot/publications/scottish-greenhouse-gas-statistics-2022/documents/">Source: Scottish Greenhouse Gas Statistics 2022</a></div>',
           "Subsector Emissions" = '<div style="font-size: 16px; font-weight: bold;">Source: Scottish agriculture greenhouse gas emissions and nitrogen use 2022-23.</div>',
           "Gas Emissions" = '<div style="font-size: 16px; font-weight: bold;">Source: Scottish agriculture greenhouse gas emissions and nitrogen use 2022-23.</div>')
  })
  
  lineChartServer(chart_id, chart_data, column_name, title, yAxisTitle, footer_text)
}

# Function to render area charts
render_area_chart <- function(chart_id, chart_data, chart_type, input, output) {
  column_name <- reactive({ names(chart_data())[1] })
  
  title <- reactive({
    switch(chart_type,
           "Total Emissions" = "National Greenhouse Gas Emissions by Source in Scotland",
           "Subsector Emissions" = "Agricultural Greenhouse Gas Emissions by Subsector in Scotland",
           "Gas Emissions" = "Agricultural Greenhouse Gas Emissions Breakdown in Scotland"
    )
  })
  
  yAxisTitle <- reactive({
    switch(chart_type,
           "Total Emissions" = "Emissions (MtCO₂e)",
           "Subsector Emissions" = "Emissions (MtCO₂e)",
           "Gas Emissions" = "Emissions (MtCO₂e)")
  })
  
  footer_text <- reactive({
    switch(chart_type,
           "Total Emissions" = '<div style="font-size: 16px;"><a href="https://www.gov.scot/publications/scottish-greenhouse-gas-statistics-2022/documents/">Source: Scottish Greenhouse Gas Statistics 2022</a></div>',
           "Subsector Emissions" = '<div style="font-size: 16px; font-weight: bold;">Source: Scottish agriculture greenhouse gas emissions and nitrogen use 2022-23.</div>',
           "Gas Emissions" = '<div style="font-size: 16px; font-weight: bold;">Source: Scottish agriculture greenhouse gas emissions and nitrogen use 2022-23.</div>')
  })
  
  areaChartServer(chart_id, chart_data, column_name, title, yAxisTitle, footer_text)
}

# Function to render bar charts
render_bar_chart <- function(chart_id, chart_data, chart_type, input, output) {
  column_name <- reactive({ names(chart_data())[1] })
  
  title <- reactive({
    switch(chart_type,
           "Total Emissions" = "National Greenhouse Gas Emissions Timelapse",
           "Subsector Emissions" = "Agricultural Greenhouse Gas Emissions Timelapse",
           "Gas Emissions" = "Agricultural Greenhouse Gas Emissions Breakdown Timelapse"
    )
  })
  
  yAxisTitle <- reactive({
    switch(chart_type,
           "Total Emissions" = "Emissions (MtCO₂e)",
           "Subsector Emissions" = "Emissions (MtCO₂e)",
           "Gas Emissions" = "Emissions (MtCO₂e)")
  })
  
  footer_text <- reactive({
    switch(chart_type,
           "Total Emissions" = '<div style="font-size: 16px;"><a href="https://www.gov.scot/publications/scottish-greenhouse-gas-statistics-2022/documents/">Source: Scottish Greenhouse Gas Statistics 2022</a></div>',
           "Subsector Emissions" = '<div style="font-size: 16px; font-weight: bold;">Source: Scottish agriculture greenhouse gas emissions and nitrogen use 2022-23.</div>',
           "Gas Emissions" = '<div style="font-size: 16px; font-weight: bold;">Source: Scottish agriculture greenhouse gas emissions and nitrogen use 2022-23.</div>')
  })
  
  barChartServer(chart_id, chart_data, column_name, title, yAxisTitle, footer_text)
}

## File: module_data_functions.R 
 #module_data_functions.R

# Function to get data based on the chart type
get_variables <- function(chart_type) {
  switch(chart_type,
         "Total Emissions" = national_total,
         "Subsector Emissions" = subsector_total,
         "Gas Emissions" = agri_gas)
}

# Function to create reactive chart data based on user inputs
create_chart_data <- function(chart_type, year_input, variables_input, input) {
  data <- get_variables(chart_type)
  first_col_name <- names(data)[1]
  data %>% filter(Year >= min(input[[year_input]]) & Year <= max(input[[year_input]])) %>%
    filter(!!sym(first_col_name) %in% input[[variables_input]])
}

# Preset list of colors
preset_colors <- c("#002d54", "#2b9c93", "#6a2063", "#e5682a", "#0b4c0b", "#5d9f3c", "#592c20", "#ca72a2")

# Function to assign colors to variables
assign_colors <- function(data, colors) {
  first_col_name <- names(data)[1]
  variables <- unique(data[[first_col_name]])
  setNames(colors[1:length(variables)], variables)
}

# Function to handle variable select and button events
handle_variable_select_and_buttons <- function(id_prefix, variables, input, output, session) {
  selected_variables <- reactive({ vars <- variables(); vars[vars != "Total"] })
  
  output[[paste0("variable_select_", id_prefix)]] <- renderUI({
    checkboxGroupInput(paste0("variables_", id_prefix), "Choose variables to add to chart", choices = variables(), selected = selected_variables())
  })
  
  observeEvent(input[[paste0("select_all_button_", id_prefix)]], {
    updateCheckboxGroupInput(session, paste0("variables_", id_prefix), selected = variables())
  })
  
  observeEvent(input[[paste0("deselect_all_button_", id_prefix)]], {
    updateCheckboxGroupInput(session, paste0("variables_", id_prefix), selected = character(0))
  })
}

## File: module_data_table.R 
 #module_data_table.R

library(DT)

# Function to render data tables using DT::renderDT
render_data_table <- function(table_id, chart_data, output) {
  output[[table_id]] <- DT::renderDT({
    data <- chart_data()
    data$Year <- as.character(data$Year)
    first_column_name <- names(data)[1]
    data <- pivot_wider(data, names_from = !!sym(first_column_name), values_from = Value)
    data <- data %>% mutate(across(where(is.numeric), ~ formatC(.x, format = "f", digits = 2)))
    datatable(as_tibble(data), options = list(paging = FALSE, scrollX = TRUE, dom = 'Bfrtip', buttons = c('copy', 'csv', 'excel', 'pdf', 'print')), rownames = FALSE)
  })
}

# Function to handle data download
handle_data_download <- function(download_id, chart_type, chart_data, input, output, year_input) {
  output[[download_id]] <- downloadHandler(
    filename = function() { paste("Agricultural Emissions Data -", chart_type, min(input[[year_input]]), "to", max(input[[year_input]]), ".csv") },
    content = function(file) { 
      data <- chart_data()
      first_column_name <- names(data)[1]
      data <- pivot_wider(data, names_from = !!sym(first_column_name), values_from = Value)
      data <- data %>% mutate(across(where(is.numeric), ~ formatC(.x, format = "f", digits = 5)))
      write.csv(data, file, row.names = FALSE)
    }
  )
}

## File: module_information.R 
 # module_information.R

informationUI <- function(id) {
  ns <- NS(id)
  tagList(
    div(
      class = "container",
      tags$div(style = "font-size: 24px; font-weight: bold;", "Publications:"),  # Bigger and bold title
      tags$div(
        style = "margin-top: 20px;",
        tags$div(style = "font-size: 18px; font-weight: bold;", "Scottish Greenhouse Gas Statistics"),
        p(HTML('Official estimates of greenhouse gas emissions are available in the <a href="https://www.gov.scot/publications/scottish-greenhouse-gas-statistics-2022/documents/" target="_blank">Scottish Greenhouse Gas Statistics 2022</a> publication.')),
        tags$div(style = "font-size: 18px; font-weight: bold;", "Greenhouse Gas Inventory Reports"),
        p(a(href = "https://www.gov.scot/publications/estimated-dairy-emissions-mitigation-smart-inventory/", "Greenhouse gas inventory: estimated dairy emissions and their mitigation", target = "_blank")),
        tags$div(style = "font-size: 18px; font-weight: bold;", "Climate change evidence reports"),
        p(a(href = "https://www.gov.scot/publications/resas-climate-change-evidence-dairy-farmer-led-group/", "Dairy Farmer-led Group: climate change evidence", target = "_blank")),
        p(a(href = "https://www.gov.scot/publications/resas-climate-change-evidence-arable-farmer-led-group/", "Arable Farmer-led Group: climate change evidence", target = "_blank")),
        p(a(href = "https://www.gov.scot/publications/resas-climate-change-evidence-huc-farmer-led-group/", "Hill, Upland and Crofting Farmer-led Group: climate change evidence", target = "_blank")),
        p(a(href = "https://www.gov.scot/publications/pig-sector-flg-climate-change-greenhouse-gas-evidence/", "Pig Sector Farmer-Led Climate Change Group: climate change and greenhouse gas evidence", target = "_blank")),
        tags$div(style = "font-size: 18px; font-weight: bold;", "Greenhouse Gas Inventory Reports"),
        p(a(href = "https://www.gov.scot/publications/estimated-dairy-emissions-mitigation-smart-inventory/", "Greenhouse gas inventory: estimated dairy emissions and their mitigation", target = "_blank")),
        p(a(href = "https://www.gov.scot/publications/estimated-arable-emissions-mitigation-smart-inventory/", "Greenhouse gas inventory: estimated arable emissions and their mitigation", target = "_blank")),
        p(a(href = "https://www.gov.scot/publications/disaggregating-headline-smart-inventory-figures/", "Greenhouse gas emissions - agricultural: disaggregating headline figures", target = "_blank"))
      ),
      tags$div(style = "font-size: 24px; font-weight: bold; margin-top: 40px;", "Glossary:"),  # Bigger and bold title
      tags$div(
        style = "margin-top: 20px;",
        tags$div(style = "font-size: 18px; font-weight: bold;", "Carbon dioxide (CO2):"),
        p("Carbon dioxide is one of the main gases responsible for climate change. It is mostly emitted through the oxidation of carbon in fossil fuels, e.g. burning coal."),
        tags$div(style = "font-size: 18px; font-weight: bold;", "Greenhouse gas:"),
        p("A greenhouse gas is a gas which absorbs infrared radiation emitted from the surface of the Earth, helping to retain a portion of that energy in the atmosphere as heat."),
        tags$div(style = "font-size: 18px; font-weight: bold;", "LULUCF:"),
        p("Estimates of emissions and removals from land use, land use change and forestry (LULUCF) depend critically on assumptions made on the rate of loss or gain of carbon in Scotland’s carbon rich soils. In Scotland, LULUCF activities, taken as a whole, acts as a slight source in recent years although acted as a net sink between 2009-2017, absorbing more greenhouse gas emissions than it releases."),
        tags$div(style = "font-size: 18px; font-weight: bold;", "Methane (CH4):"),
        p("Methane is a greenhouse gas that is around 28 times more potent in the atmosphere than CO2 over a 100-year time horizon. Main sources include agriculture and landfill."),
        tags$div(style = "font-size: 18px; font-weight: bold;", "Metric tonne of carbon dioxide equivalent (MtCO₂e):"),
        p("Provides an estimate of total GHG emissions taking into account the different effects that different gases have on climate change, known as their global warming potential (GWP)."),
        tags$div(style = "font-size: 18px; font-weight: bold;", "Nitrous oxide (N2O):"),
        p("Nitrous oxide is a greenhouse gas that is around 265 times more potent in the atmosphere than CO2 over a 100-year time horizon. The main source is agricultural soil.")
      )
    )
  )
}

## File: module_line_chart.R 
 #module_line_chart.R

# UI function for the line chart module
lineChartUI <- function(id) {
  ns <- NS(id)
  tagList(
    htmlOutput(ns("title")),
    highchartOutput(ns("line_chart")),
    htmlOutput(ns("footer")),  # Add footer output
    div(
      class = "note",
      style = "margin-top: 20px; padding: 10px; border-top: 1px solid #ddd;",
      HTML(
        "<strong>Note:</strong><ul>
          <li>To remove a series from the chart, deselect the variable from the sidebar menu.</li>
          <li>Select a year range by adjusting the slider on the sidebar or by zooming into the graph by clicking and dragging over an area you wish to see.</li>
          <li>You can see data values for a specific year by hovering your mouse over the line.</li>
        </ul>"
      )
    )
  )
}

# Server function for the line chart module
lineChartServer <- function(id, data, group_column, title, yAxisTitle, footer) {
  moduleServer(id, function(input, output, session) {
    ns <- session$ns
    reactive_colors <- reactive({ assign_colors(data(), preset_colors) })
    
    output$title <- renderUI({
      year_min <- min(data()$Year)
      year_max <- max(data()$Year)
      HTML(paste0("<div style='font-size: 20px; font-weight: bold;'>", title(), " ", year_min, " to ", year_max, "</div>"))
    })
    
    output$footer <- renderUI({
      HTML(footer())
    })
    
    output$line_chart <- renderHighchart({
      chart_data <- data()
      colors <- reactive_colors()
      hc <- highchart() %>%
        hc_chart(type = "line", zoomType = "xy") %>%
        hc_yAxis(title = list(text = yAxisTitle())) %>%
        hc_xAxis(type = "category", tickInterval = 5) %>%
        hc_legend(align = "left", alignColumns = FALSE, layout = "horizontal") %>%
        hc_plotOptions(line = list(colorByPoint = FALSE)) %>%
        hc_add_theme(thm)
      
      unique_groups <- unique(chart_data[[group_column()]])
      lapply(unique_groups, function(g) {
        hc <<- hc %>%
          hc_add_series(name = g, data = chart_data[chart_data[[group_column()]] == g, ] %>% select(x = Year, y = Value), color = colors[[g]])
      })
      
      hc
    })
  })
}

## File: module_summary.R 
 #module_summary.R

library(shiny)
library(shinydashboard)
library(ggplot2)
library(dplyr)
library(highcharter)

# Function to create a small line plot for the value boxes
small_line_plot <- function(data, color) {
  ggplot(data, aes(x = Year, y = Value)) +
    geom_line(color = "#002d54") +
    theme_void() +
    theme(plot.background = element_rect(fill = "transparent", color = NA))
}

# Function to create an arrow for Year on Year change
create_yoy_arrow <- function(change) {
  if (is.na(change) || is.nan(change)) {
    icon("minus", style = "color: grey;")
  } else if (change > 0) {
    icon("arrow-up", style = "color: #2b9c93;")
  } else {
    icon("arrow-down", style = "color: #002d54;")
  }
}

# UI Module for Value Box
valueBoxUI <- function(id) {
  ns <- NS(id)
  uiOutput(ns("valueBox"))
}

# Server Module for Value Box
valueBoxServer <- function(id, data, category, industry, current_year, comparison_year) {
  moduleServer(id, function(input, output, session) {
    ns <- session$ns
    reactive_data <- reactive({ data() %>% filter(!!sym(category()) == !!industry(), Year %in% c(current_year(), comparison_year())) })
    
    output$valueBox <- renderUI({
      data_filtered <- reactive_data()
      current_value <- data_filtered %>% filter(Year == current_year()) %>% summarise(Value = sum(Value, na.rm = TRUE)) %>% pull(Value)
      comparison_value <- data_filtered %>% filter(Year == comparison_year()) %>% summarise(Value = sum(Value, na.rm = TRUE)) %>% pull(Value)
      yoy_change <- if (comparison_value == 0 || is.na(comparison_value)) NA else ((current_value - comparison_value) / comparison_value) * 100
      
      box(
        class = "value-box",
        title = NULL,
        width = 12,
        solidHeader = TRUE,
        div(
          style = "display: flex; flex-direction: column; justify-content: space-between; height: 100%; padding: 5px;", # Adjusted padding
          div(
            style = "flex: 1; margin-bottom: 5px;", # Reduced margin-bottom
            h5(class = "value-box-title", industry()),
            div(
              style = "display: flex; align-items: baseline; margin-bottom: 5px;", # Adjusted margin-bottom
              h3(sprintf("%.2f", current_value), style = "margin: 0;"), # Removed margin
              span("MtCO₂e", class = "value-box-units")
            ),
            div(
              style = "display: flex; align-items: center; margin-bottom: -10px;", # Negative margin to move closer
              create_yoy_arrow(yoy_change),
              span(class = "value-box-yoy", ifelse(is.na(yoy_change), "NA", sprintf("%.2f%%", yoy_change)), style = ifelse(yoy_change > 0, "color: #2b9c93; margin-left: 5px;", "color: #002d54; margin-left: 5px;"))
            )
          ),
          div(
            style = "margin-top: -30px;", # Apply the margin here to move the sparkline up
            plotOutput(ns("sparkline"), height = "30px", width = "100%")
          )
        )
      )
    })
    
    output$sparkline <- renderPlot({
      small_line_plot(data() %>% filter(!!sym(category()) == !!industry()), "#28a745")
    })
  })
}


# UI Module for Chart
chartUI <- function(id, title) {
  ns <- NS(id)
  box(
    title = span(class = "box-title", title),
    width = 12,
    solidHeader = TRUE,
    div(class = "box-content", highchartOutput(ns("chartOutput"), height = "300px"))
  )
}

# Server Module for Line Chart on Summary Page
summaryLineChartServer <- function(id, data) {
  moduleServer(id, function(input, output, session) {
    ns <- session$ns
    
    output$chartOutput <- renderHighchart({
      summary_line_data <- data()
      variable_col <- names(summary_line_data)[1]  # Get the first column name, which is the variable name
      
      series_list <- lapply(unique(summary_line_data[[variable_col]]), function(variable) {
        df <- summary_line_data %>% filter(!!sym(variable_col) == variable)
        list(
          name = variable,
          data = df %>% select(Year, Value) %>% list_parse2()
        )
      })
      
      highchart() %>%
        hc_chart(type = "line", zoomType = "xy") %>%
        hc_xAxis(categories = unique(summary_line_data$Year)) %>%
        hc_yAxis(title = list(text = "MtCO₂e")) %>%
        hc_legend(align = "left", alignColumns = FALSE, layout = "horizontal") %>%
        hc_plotOptions(line = list(marker = list(enabled = FALSE))) %>%  # Disable markers
        hc_add_theme(thm) %>%
        hc_add_series_list(series_list)
    })
  })
}

# Server Module for Pie Chart
summaryPieChartServer <- function(id, data, current_year, category) {
  moduleServer(id, function(input, output, session) {
    ns <- session$ns
    output$chartOutput <- renderHighchart({
      pie_data <- data() %>% filter(Year == current_year() & !!sym(category()) != "Total") %>% 
        group_by(!!sym(category())) %>% summarise(Value = sum(Value, na.rm = TRUE))
      highchart() %>%
        hc_chart(type = "pie") %>%
        hc_series(list(data = list_parse(pie_data %>% transmute(name = !!sym(category()), y = Value)))) %>%
        hc_plotOptions(pie = list(dataLabels = list(enabled = FALSE),
                                  tooltip = list(pointFormat = '{point.y:.2f} MtCO₂e ({point.percentage:.2f}%)')))
    })
  })
}

# Helper function to render the appropriate summary chart
render_summary_chart <- function(chart_type, id, data, current_year, category) {
  if (chart_type == "Total Emissions") {
    summaryLineChartServer(id, data)
  } else {
    summaryPieChartServer(id, data, current_year, category)
  }
}

# Server Module for Bar Chart
summaryBarChartServer <- function(id, data, current_year, comparison_year, category) {
  moduleServer(id, function(input, output, session) {
    ns <- session$ns
    output$chartOutput <- renderHighchart({
      bar_data <- data() %>% filter(Year == current_year() & !!sym(category()) != "Total") %>% group_by(!!sym(category())) %>% summarise(Value = sum(Value, na.rm = TRUE))
      line_data <- data() %>% filter(Year == comparison_year() & !!sym(category()) != "Total") %>% group_by(!!sym(category())) %>% summarise(Value = sum(Value, na.rm = TRUE))
      
      colors <- c("#002d54", "#2b9c93", "#6a2063", "#e5682a", "#0b4c0b", "#5d9f3c", "#592c20", "#ca72a2")
      
      highchart() %>%
        hc_chart(type = "bar") %>%
        hc_xAxis(categories = bar_data[[category()]]) %>%
        hc_yAxis(title = list(text = "MtCO₂e")) %>%
        hc_add_series(
          name = as.character(current_year()), 
          data = bar_data$Value, 
          type = "bar", 
          colorByPoint = TRUE, 
          colors = colors
        ) %>%
        hc_add_series(
          name = as.character(comparison_year()), 
          data = line_data$Value, 
          type = "scatter", 
          color = "#ff0000", 
          marker = list(enabled = TRUE, symbol = "circle", lineWidth = 2, radius = 3)
        ) %>%
        hc_plotOptions(series = list(groupPadding = 0, pointPadding = 0.1, borderWidth = 0)) %>%
        hc_tooltip(shared = TRUE, pointFormat = '{series.name}: {point.y:.2f} MtCO₂e<br/>') %>%
        hc_add_theme(thm)
    })
  })
}

## File: options.R 
 ##options.R

library(shiny)
library(highcharter)
library(tidyverse)
library(shinyWidgets)
library(shinythemes)
library(rsconnect)
library(png)
library(htmltools)
library(DT)
library(shinyjs)
library(RColorBrewer)
library(shinyjs)


# Highchart options
hcoptslang <- getOption("highcharter.lang")
hcoptslang$thousandsSep <- ","
hcoptslang$numericSymbols <- " "
options(highcharter.lang = hcoptslang)

# Load the theme
thm <- source("hc_theme.R")$value

# Load the .RData file containing the datasets
load("ghg_data.RData")


# Generate Titles

generate_title <- function(chart_type, data) {
  year_min <- min(data$Year, na.rm = TRUE)
  year_max <- max(data$Year, na.rm = TRUE)
  
  title <- switch(chart_type,
                  "Subsector Emissions" = paste("Agricultural Emissions by Subsector in Scotland,", year_min, "to", year_max),
                  "Total Emissions" = paste("National Emissions by Source in Scotland,", year_min, "to", year_max),
                  "Gas Emissions" = paste("Agricultural Gas Emissions Breakdown in Scotland,", year_min, "to", year_max),
                  paste("Unknown Chart Type")
  )
  
  return(title)
}

## File: panels.R 
 # Function to generate the sidebar panel
generate_sidebar_panel <- function(id_prefix) {
  sidebarPanel(
    width = 3,
    uiOutput(paste0("variable_select_", id_prefix)),  # Placeholder for variable selection UI
    actionButton(paste0("select_all_button_", id_prefix), "Select All"),  # 'Select All' button
    actionButton(paste0("deselect_all_button_", id_prefix), "Deselect All"),  # 'Deselect All' button
    div(chooseSliderSkin("Flat"),
        # Slider input for selecting the year range
        sliderInput(paste0("year_", id_prefix), "Select year range", value = c(1990, 2022), min = 1990, max = 2022, step = 1, sep = "", ticks = TRUE))
  )
}

# Function to generate the value boxes for the top 3 industries
generate_top_industries <- function(id_prefix) {
  fluidRow(
    column(width = 4, valueBoxUI(paste0("totalIndustry1_", id_prefix)), style = "padding-right: 0; padding-left: 0;"),
    column(width = 4, valueBoxUI(paste0("totalIndustry2_", id_prefix)), style = "padding-right: 0; padding-left: 0;"),
    column(width = 4, valueBoxUI(paste0("totalIndustry3_", id_prefix)), style = "padding-right: 0; padding-left: 0;")
  )
}

# Function to generate the bottom row of the summary page
generate_summary_bottom_row <- function(id_prefix, chart_type) {
  tagList(
    fluidRow(
      column(width = 4, 
             valueBoxUI(paste0("totalValue_", id_prefix)), 
             
             style = "padding-right: 0; padding-left: 0;"
      ),
      column(width = 4,
             if (chart_type == "Total Emissions") {
               chartUI(paste0("industryLineChart_", id_prefix), "Industry Emissions Over Time")
             } else {
               chartUI(paste0("industryPieChart_", id_prefix), "Category Breakdown")
             },
             style = "padding-right: 0; padding-left: 0;"
      ),
      column(width = 4, 
             chartUI(paste0("industryBarChart_", id_prefix), "Emissions by Category"), 
             style = "padding-right: 0; padding-left: 0;"
      )
    )
  )
}


# Function to generate the sidebar layout for each tab
generate_sidebar_layout <- function(id_prefix, chart_type) {
  sidebarLayout(
    sidebarPanel(
      id = paste0("sidebar_", id_prefix),
      width = 3,
      uiOutput(paste0("variable_select_", id_prefix)),
      actionButton(paste0("select_all_button_", id_prefix), "Select All"),
      actionButton(paste0("deselect_all_button_", id_prefix), "Deselect All"),
      div(chooseSliderSkin("Flat"),
          sliderInput(paste0("year_", id_prefix), "Select year range", value = c(1990, 2022), min = 1990, max = 2022, step = 1, sep = "", ticks = TRUE))
    ),
    mainPanel(
      id = paste0("mainpanel_", id_prefix),
      width = 9,
      tabsetPanel(
        id = paste0(id_prefix, "_tabs"),
        tabPanel("Summary Page",
                 value = paste0(id_prefix, "_summary"),
                 fluidRow(
                   column(width = 4, sliderInput(paste0("summary_current_year_", id_prefix), "Current Year", min = 1990, max = 2022, value = 2022, step = 1)),
                   column(width = 4, sliderInput(paste0("summary_comparison_year_", id_prefix), "Comparison Year", min = 1990, max = 2022, value = 2021, step = 1)),
                   column(width = 4,
                          div(
                            style = "margin-top: 25px; text-align: center; border: 4px solid #e3e3e3", # Add border style
                            h5("Adjust the sliders to compare data from different years.", style = "padding: 0px; font-weight: bold;")
                          )
                   )
                 ),
                 fluidRow(
                   column(width = 12, div(class = "header-text", "Top 3 Categories:"))
                 ),
                 generate_top_industries(id_prefix),
                 fluidRow(
                   column(width = 12, div(class = "header-text", "Summary Analysis:"))
                 ),
                 generate_summary_bottom_row(id_prefix, chart_type)
        ),
        tabPanel("Timelapse", div(id = "chartArea", barChartUI(paste0("barChart_", id_prefix))), value = paste0(id_prefix, "_bar")),
        tabPanel("Line Chart", div(id = "chartArea", lineChartUI(paste0("lineChart_", id_prefix))), value = paste0(id_prefix, "_line")),
        tabPanel("Area Chart", div(id = "chartArea", areaChartUI(paste0("areaChart_", id_prefix))), value = paste0(id_prefix, "_area")),
        tabPanel("Data Table",
                 dataTableOutput(paste0("pay_table_", id_prefix)),
                 downloadButton(paste0("downloadData_", id_prefix), "Download Data"),
                 value = paste0(id_prefix, "_data"))       
      )
    )
  )
}

## File: server.R 
 #server.R

# Source the necessary modules for server logic
source("module_data_functions.R")
source("module_chart_functions.R")
source("module_bar_chart.R")
source("module_data_table.R")
source("module_summary.R")

# Function to reset the year range slider when Bar Chart tab is selected
reset_year_range_slider <- function(tab_prefix, input, session) {
  observeEvent(input[[paste0(tab_prefix, "_tabs")]], {
    if (input[[paste0(tab_prefix, "_tabs")]] == paste0(tab_prefix, "_bar")) {
      updateSliderInput(session, paste0("year_", tab_prefix), value = c(1990, 2022))
    }
  })
}

# List of sidebar IDs
sidebar_ids <- c("sidebar_total", "sidebar_subsector", "sidebar_gas")

# Define a function to show and then hide the sidebars
toggle_sidebars <- function(ids, delay_time = 100) {
  lapply(ids, shinyjs::show)
  shinyjs::delay(delay_time, {
    lapply(ids, shinyjs::hide)
  })
}



setup_tab <- function(tab_prefix, chart_type, input, output, session) {
  # Create reactive chart data based on sidebar inputs
  chart_data <- reactive({
    create_chart_data(chart_type, paste0("year_", tab_prefix), paste0("variables_", tab_prefix), input)
  })
  
  # Get the first column name dynamically
  first_col_name <- reactive({
    names(chart_data())[1]
  })
  
  # Get the entire dataset without filtering based on sidebar inputs for summary page
  full_data <- reactive({
    get_variables(chart_type)
  })
  
  # Render line chart with filtering for the "total" tab
  if (chart_type == "Total Emissions") {
    filtered_data <- reactive({
      full_data() %>% filter(!!sym(first_col_name()) %in% c("Agriculture", "Total"))
    })
    summaryLineChartServer(paste0("industryLineChart_", tab_prefix), filtered_data)
  } else {
    summaryPieChartServer(paste0("industryPieChart_", tab_prefix), full_data, current_year, first_col_name)
  }
  
  # Render other charts
  render_line_chart(paste0("lineChart_", tab_prefix), chart_data, chart_type, input, output)
  render_area_chart(paste0("areaChart_", tab_prefix), chart_data, chart_type, input, output)
  render_data_table(paste0("pay_table_", tab_prefix), chart_data, output)
  handle_data_download(paste0("downloadData_", tab_prefix), chart_type, chart_data, input, output, paste0("year_", tab_prefix))
  render_bar_chart(paste0("barChart_", tab_prefix), chart_data, chart_type, input, output)
  
  # Render summary page
  current_year <- reactive({ input[[paste0("summary_current_year_", tab_prefix)]] })
  comparison_year <- reactive({ input[[paste0("summary_comparison_year_", tab_prefix)]] })
  
  valueBoxServer(paste0("totalIndustry1_", tab_prefix), full_data, first_col_name, get_industry(1, full_data, current_year, first_col_name), current_year, comparison_year)
  valueBoxServer(paste0("totalIndustry2_", tab_prefix), full_data, first_col_name, get_industry(2, full_data, current_year, first_col_name), current_year, comparison_year)
  valueBoxServer(paste0("totalIndustry3_", tab_prefix), full_data, first_col_name, get_industry(3, full_data, current_year, first_col_name), current_year, comparison_year)
  valueBoxServer(paste0("totalValue_", tab_prefix), full_data, first_col_name, reactive("Total"), current_year, comparison_year)
  
  summaryBarChartServer(paste0("industryBarChart_", tab_prefix), full_data, current_year, comparison_year, first_col_name)
  
  # Reset year range slider when bar chart tab is selected
  reset_year_range_slider(tab_prefix, input, session)
  
  # Control sidebar state based on selected tab within the section
  observeEvent(input[[paste0(tab_prefix, "_tabs")]], {
    if (input[[paste0(tab_prefix, "_tabs")]] == paste0(tab_prefix, "_summary")) {
      session$sendCustomMessage(type = 'sidebarState', message = 'close')
    } else {
      session$sendCustomMessage(type = 'sidebarState', message = 'open')
    }
  })
}


# Function to get top industries
get_industry <- function(index, data, current_year, first_col_name) {
  reactive({
    industries <- data() %>%
      filter(Year == current_year() & !!sym(first_col_name()) != "Total") %>%
      group_by(!!sym(first_col_name())) %>%
      summarise(Value = sum(Value, na.rm = TRUE)) %>%
      arrange(desc(Value)) %>%
      slice_head(n = 3) %>%
      pull(!!sym(first_col_name()))
    if (length(industries) >= index) {
      industries[index]
    } else {
      NA
    }
  })
}

# Set up server
server <- function(input, output, session) {
  # Reactive for chart type based on selected tab
  chart_type <- reactive({
    switch(input$navbar,
           "total" = "Total Emissions",
           "subsector" = "Subsector Emissions",
           "gas" = "Gas Emissions",
           "info" = NULL)  # Special case for Further Information tab
  })
  
  # Reactive for variables based on chart type
  variables <- reactive({
    if (is.null(chart_type())) {
      return(NULL)
    }
    unique(get_variables(chart_type())[[1]])  # First column is the variable column
  })
  
  # Handle variable select and button events for each tab
  lapply(c("total", "subsector", "gas"), function(prefix) {
    handle_variable_select_and_buttons(prefix, variables, input, output, session)
  })
  
  # Ensure all variables except "Total" are selected for the charts
  observe({
    lapply(c("total", "subsector", "gas"), function(prefix) {
      if (input$navbar == prefix) {
        updateCheckboxGroupInput(session, paste0("variables_", prefix), selected = setdiff(variables(), "Total"))
      }
    })
  })
  
  # Set up tabs
  tabs <- list(
    total = "Total Emissions",
    subsector = "Subsector Emissions",
    gas = "Gas Emissions"
  )
  
  lapply(names(tabs), function(prefix) {
    setup_tab(prefix, tabs[[prefix]], input, output, session)
  })
  
  # Control sidebar state based on selected tab within the section
  observeEvent(input$navbar, {
    lapply(names(tabs), function(prefix) {
      observeEvent(input[[paste0(prefix, "_tabs")]], {
        if (input[[paste0(prefix, "_tabs")]] == paste0(prefix, "_summary")) {
          session$sendCustomMessage(type = 'sidebarState', message = 'close')
        } else {
          session$sendCustomMessage(type = 'sidebarState', message = 'open')
        }
      })
    })
  })
  
  # Toggle sidebar button
  observeEvent(input$toggleSidebar, {
    session$sendCustomMessage(type = 'toggleSidebar', message = NULL)
  })
  
  # Reset to summary page
  observeEvent(input$navbar, {
    updateTabsetPanel(session, "subsector_tabs", selected = "subsector_summary")
    updateTabsetPanel(session, "total_tabs", selected = "total_summary")
    updateTabsetPanel(session, "gas_tabs", selected = "gas_summary")
  })
  # Ensure sidebar loads correctly
  observeEvent(input$navbar, {
    toggle_sidebars(sidebar_ids)
    tabset_panel_id <- switch(input$navbar,
                              "total" = "total_tabs",
                              "gas" = "gas_tabs",
                              "subsector" = "subsector_tabs",
                              "info" = NULL)
    if (!is.null(tabset_panel_id)) {
      selected_tab <- paste0(input$navbar, "_summary")
      updateTabsetPanel(session, tabset_panel_id, selected = selected_tab)
    }
  })
}

## File: ui.R 
 # ui.R

# Source UI modules
source("panels.R")
source("module_line_chart.R")
source("module_data_table.R")
source("options.R")
source("module_area_chart.R")
source("module_bar_chart.R")
source("module_summary.R")
source("module_information.R")  # Add this line
source("hc_theme.R")
library(shinyjs)

# Function to create the footer panel
create_footer <- function() {
  div(
    class = "footer",
    span("Last Updated: ", format(Sys.Date(), "%d/%m/%Y")),
    img(src = "sg.png", alt = "SG Logo", style = "height: 30px; margin-left: 10px;")
  )
}

# Generate the UI
ui <- fluidPage(
  useShinyjs(),  # Initialize shinyjs
  theme = shinytheme("flatly"),
  tags$head(
    tags$link(rel = "stylesheet", type = "text/css", href = "styles.css"),
    includeHTML("google-analytics.html"),  # Include Google Analytics HTML
    tags$script(HTML("
      $(document).ready(function() {
        $('#toggleSidebar').on('click', function() {
          var isVisible = $('#sidebar_total, #sidebar_subsector, #sidebar_gas').is(':visible');
          $('#sidebar_total, #sidebar_subsector, #sidebar_gas').toggle();
          if (isVisible) {
            $('#mainpanel_total, #mainpanel_subsector, #mainpanel_gas').removeClass('col-sm-9').addClass('col-sm-12');
          } else {
            $('#mainpanel_total, #mainpanel_subsector, #mainpanel_gas').removeClass('col-sm-12').addClass('col-sm-9');
          }
          setTimeout(function() {
            $(window).trigger('resize');
            Highcharts.charts.forEach(function(chart) {
              if (chart) {
                chart.reflow();
              }
            });
          }, 300); // Delay to ensure the toggle animation is complete
        });

        Shiny.addCustomMessageHandler('sidebarState', function(message) {
          if (message === 'close') {
            $('#sidebar_total, #sidebar_subsector, #sidebar_gas').hide();
            $('#mainpanel_total, #mainpanel_subsector, #mainpanel_gas').removeClass('col-sm-9').addClass('col-sm-12');
          } else {
            $('#sidebar_total, #sidebar_subsector, #sidebar_gas').show();
            $('#mainpanel_total, #mainpanel_subsector, #mainpanel_gas').removeClass('col-sm-12').addClass('col-sm-9');
          }
          setTimeout(function() {
            $(window).trigger('resize');
            Highcharts.charts.forEach(function(chart) {
              if (chart) {
                chart.reflow();
              }
            });
          }, 300); // Delay to ensure the toggle animation is complete
        });
      });
    "))
  ),
  div(class = "container-fluid full-height",
      div(class = "content",
          navbarPage(
            title = div(
              div("Scottish Agricultural Emissions Dashboard", style = "display: inline-block; margin-right: 20px;"),
              actionLink("toggleSidebar", icon("bars"), class = "nav-link", style = "display: inline-block; vertical-align: middle;"),
              tags$li(class = "nav-item", img(src = "RESAS Logo.png", class = "header-logo"))
            ),
            id = "navbar",
            tabPanel("Agriculture Emissions", value = "subsector", generate_sidebar_layout("subsector", "Subsector Emissions")),
            tabPanel("Industry Emissions", value = "total", generate_sidebar_layout("total", "Total Emissions")),
            tabPanel("Gas Emissions", value = "gas", generate_sidebar_layout("gas", "Gas Emissions")),
            tabPanel("Further Information", value = "info", informationUI("info"))  # Add this line
          )
      ),
      create_footer()
  )
)

## File: www/styles.css 
 /* styles.css */

.chart-title {
  font-size: 30px !important;
  font-weight: bold !important;
  margin-bottom: 10px !important;
  font-family: 'Arial', sans-serif !important;
}

/* General styles */
.full-width {
  width: 100% !important;
}
.full-height {
  height: 100vh !important;
}
.navbar {
  margin-bottom: 5px !important;
}
.sidebar {
  width: 250px !important;
  padding: 10px !important;
  border-right: 1px solid #ddd !important;
  float: left !important;  /* Float to the left */
  height: calc(100vh - 65px) !important;  /* Adjust for header and reduced margin */
}
.main-panel {
  margin-left: 270px !important;
  padding: 10px !important;
  overflow: auto !important;  /* Enable scrolling for main content */
  height: calc(100vh - 65px) !important;  /* Adjust for header and reduced margin */
}
.header-logo {
  position: absolute !important;
  top: 0px !important;
  right: 0px !important;
  height: 60px !important;
}

.box {
  border: 1px solid #e3e3e3;
  background-color: white;
  margin: 0;
  padding: 10px;
}
.value-box {
  height: 160px !important;
  text-align: left;
  box-shadow: 0 1px 2px rgba(0,0,0,0.1);
  margin: 0;
  padding: 0;
}
.value-box .inner {
  padding: 5px;
}
.value-box h3, .value-box h5 {
  margin: 0;
  color: #333;
}
.value-box h3 {
  font-size: 36px;
  font-weight: bold;
}
.value-box-units {
  font-size: 18px;
  margin-left: 5px;
  display: inline-block;
}
.value-box-title {
  font-size: 20px;
  margin-bottom: 5px;
  font-weight: bold;
}
.value-box-yoy {
  font-size: 24px;
  font-weight: bold;
}
.sparkline {
  width: 100%;
  height: 30px;
}
.header-text {
  font-size: 24px;
  font-weight: bold;
  margin-bottom: 10px;
}
.box-title {
  font-size: 20px;
  font-weight: bold;
  margin-bottom: 0px;
}
.box-content {
  display: flex;
  flex-direction: column;
  justify-content: space-between;
  height: 100%;
}
.content, .row, .col {
  margin: 0;
  padding: 0;
}
.body {
  background-color: #f9f9f9;
  font-family: 'Arial', sans-serif;
  font-size: 16px;
  color: black; /* Set text color to black */
  line-height: 1.5;
}

html, body {
  height: 100%;
  margin: 0;
  padding: 0;
}

.container-fluid.full-height {
  display: flex;
  flex-direction: column;
  min-height: 100vh;
}

.content {
  flex: 1 0 auto;
}

.footer {
  flex-shrink: 0;
  background-color: #ffffff;
  padding: 10px;
  text-align: center;
  border-top: 1px solid #dee2e6;
}

/* Apply default font size, family, and color to all common elements */
h1, h2, h3, h4, h5, p, div, span, a, li, table, th, td, input, button, select, textarea {
  font-family: Arial, sans-serif;
  font-size: 16px;
}

/* Set default font size, family, and color for Highcharts */
.highcharts-title,
.highcharts-subtitle,
.highcharts-axis-title,
.highcharts-axis-labels,
.highcharts-tooltip,
.highcharts-legend-item,
.highcharts-data-label {
  font-family: Arial, sans-serif !important;
  font-size: 16px !important;
  color: black !important; /* Set text color to black */
}

/* Slider colours */

/* Apply custom styles to all sliders */
.irs-single, .irs-bar-edge, .irs-bar {
  background: #002d54 !important;
  border-top: 1px solid #002d54 !important;
  border-bottom: 1px solid #002d54 !important;
}

/* Change the color of the number tags */
.irs-from, .irs-to, .irs-single {
  background: #002d54 !important;
  color: white !important;
  font-weight: bold !important;
}

/* Ensure grid text and min/max labels are also styled */
.irs-grid-text, .irs-min, .irs-max {
  color: #002d54 !important;
}

/* Remove bullet point from nav-item */
.navbar-nav > li.nav-item,
.navbar-nav > li {
  list-style-type: none;
  margin: 0;
  padding: 0;
}

/* Specific rule to remove bullet point */
.nav-item {
  list-style: none !important;
}
